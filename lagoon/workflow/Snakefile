configfile: os.path.join(workflow.basedir, '../', 'config', 'config.yaml')

# Concatenate Snakemake's own log file with the master log file
onsuccess:
    shell("cat {log} >> " + config['log'])

onerror:
    shell("cat {log} >> " + config['log'])

outTouch = os.path.join(config['output'], config['input'])

def get_files(config):
    import glob

    return glob.glob(config)


def get_attrib_files(config):
    import glob

    files = glob.glob(config)
    if len(files) == 1:
        f = []
        with open(files[0], "r") as fin:
            if not os.path.exists(fin.readline()):
                return [f.split("/")[-1].split(".")[0] for f in files]
            f.extend(line.strip() for line in fin)
        return [i.split("/")[-1].split(".")[0] for i in f]
    return [i.split("/")[-1].split(".")[0] for i in files]


# ==================================== GET CONFIG / GET FILES ==================================== #

try:
    FASTA = get_files(config["input"])
    CAT_F = f"results/{config['concat_file']}"
    DDB = f"results/{config['diamond_database']}"
except:
    FASTA = ""
    CAT_F = ""
    DDB = ""

DBT = f"results/{config['diamond_blastp']}"
AN_F = get_files(config["annotation"])
ATBT = config["attributes"]
COL = config["columns"]
NET_F = config["network_file"]
NGB = config["neighbours"]
PCOV = config["filtration"]["overlap"]
if not PCOV:
    PCOV = [80]
PIDENT = config["filtration"]["identity"]
if not PIDENT:
    PIDENT = [80]
EVAL = config["filtration"]["evalue"]
if not EVAL:
    EVAL = ["1e-50"]
ISOL = config["isolated"]
IDX = f"results/index/{config['indices']}"
DIS = config["distribution"]

DISTRIB = expand("results/distribution/{distribution}.pdf", distribution=DIS)

FILTR = expand(
    "results/diamond_ssn_{overlap}_{identity}_{eval}",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
)
FILTR_S = expand(
    "results/diamond_ssn_{overlap}_{identity}_{eval}_stats",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
)
EDGES = expand(
    "results/diamond_ssn_{overlap}_{identity}_{eval}.edges",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
)
VERTI = expand(
    "results/diamond_ssn_{overlap}_{identity}_{eval}.vertices",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
)

if not config["attributes"]:
    ATTRIB = expand(
        "results/attributes/{files}.attributes",
        files=get_attrib_files(config["annotation"]),
    )
else:
    ATTRIB = config["attributes"]

VER_ATTRIB = expand(
    "results/diamond_ssn_{overlap}_{identity}_{eval}_with_attributes.vertices",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
)

COL_RESLTS = expand(
    "results/{overlap}_{identity}_{eval}_ssn_{col}_results",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
    col=COL,
)

HOM_SCORE = expand(
    "results/{overlap}_{identity}_{eval}_{col}_homogeneity_score",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
    col=COL,
)

ABUND_MAT = expand(
    "results/{overlap}_{identity}_{eval}_{col}_abundance_matrix",
    overlap=PCOV,
    identity=PIDENT,
    eval=EVAL,
    col=COL,
)


# ================================================================================================ #

# Snaketool stuff
# Mark target rules
target_rules = []
def targetRule(fn):
    assert fn.__name__.startswith('__')
    target_rules.append(fn.__name__[2:])
    return fn

# ================================================================================================ #

# ALL RULES
@targetRule
rule all:
    input:
        CAT_F,
        DDB,
        DBT,
        DISTRIB,
        IDX,
        FILTR,
        FILTR_S,
        EDGES,
        VERTI,
        ATTRIB,
        VER_ATTRIB,
        COL_RESLTS,


if FASTA:

    # CONCATENATE ALL FASTA FILES
    rule cat:
        input:
            FASTA,
        output:
            CAT_F,
            IDX,
        log:
            "results/logs/cat.log",
        benchmark:
            "results/benchmarks/cat.bench"
        conda:
            "envs/biopython.yaml"
        script:
            "scripts/cat.py"

# CREATES A DIAMOND DATABASE
    rule diamond_db:
        input:
            CAT_F,
        output:
            DDB,
        log:
            "results/logs/diamond_db.log",
        benchmark:
            "results/benchmarks/diamond_db.bench"
        conda:
            "envs/diamond.yaml"
        script:
            "scripts/diamond_makedb.py"

    rule diamond_blastp:
        input:
            db=DDB,
            fasta=CAT_F,
        output:
            DBT,
        log:
            "results/logs/diamond_blastp.log",
        benchmark:
            "results/benchmarks/diamond_blatp.bench"
        conda:
            "envs/diamond.yaml"
        script:
            "scripts/diamond_blastp.py"

# CREATE DISTRIBUTION GRAPHS
if DISTRIB:

    rule distribution:
        input:
            DBT,
        output:
            DISTRIB,
        log:
            "results/logs/distribution.log",
        benchmark:
            "results/benchmarks/distribution.bench"
        conda:
            "envs/matplotlib.yaml"
        script:
            "scripts/distribution.py"


# FILTER THE DIAMOND BLASTP OUTPUT
rule filter:
    input:
        DBT,
    params:
        overlap=PCOV,
        identity=PIDENT,
        evalue=EVAL,
    output:
        filtr=FILTR,
        stats=FILTR_S,
    log:
        "results/logs/filter.log",
    benchmark:
        "results/benchmarks/filter.bench"
    script:
        "scripts/filter.py"


if config["conversion"]:

    # CONVERT DIAMOND OUTPUT INTO IGRAPH-PYTHON INPUT
    rule diamond2graph:
        input:
            FILTR,
        output:
            EDGES,
            VERTI,
        log:
            "results/logs/diamond2graph.log",
        benchmark:
            "results/benchmarks/diamond2graph.bench"
        script:
            "scripts/diamond2graph.py"


# ASSOCIATE EVERY ATTRIBUTES OF A SEQUENCE ID
rule attributes:
    input:
        an_files=AN_F,
        indices=IDX,
    output:
        ATTRIB,
    log:
        "results/logs/attributes.log",
    benchmark:
        "results/benchmarks/attributes.bench"
    params:
        columns=COL,
    script:
        "scripts/attributes.py"


if not config["attributes"]:

    # ADDS ATTRIBUTES TO THE VERTEX FILE
    rule vertices:
        input:
            attrib=ATTRIB,
            vertices=VERTI,
            indices=IDX,
        output:
            VER_ATTRIB,
        log:
            "results/logs/add_attributes.log",
        benchmark:
            "results/benchmarks/add_attributes.bench"
        params:
            columns=COL,
        script:
            "scripts/add.py"


# CREATES A SEQUENCE SIMILARITY NETWORK AND EXTRACT RESULTS
rule network:
    input:
        edges=EDGES,
        vertices=VER_ATTRIB,
    output:
        rslts=COL_RESLTS,
        homscore=HOM_SCORE,
        abund_mat=ABUND_MAT,
    log:
        "results/logs/network.log",
    benchmark:
        "results/benchmarks/network.bench"
    params:
        neighbours=NGB,
        columns=COL,
        isolated=ISOL,
        similarity=NET_F,
        overlap=PCOV,
        identity=PIDENT,
        eval=EVAL,
        indices=IDX,
    conda:
        "envs/igraph.yaml"
    script:
        "scripts/network.py"
